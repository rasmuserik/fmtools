[[https://waffle.io/solsort/fmtools][https://badge.waffle.io/solsort/fmtools.png]]
[[https://travis-ci.org/solsort/fmtools][https://travis-ci.org/solsort/fmtools.png]]

* FM-Tools [[https://fmtools.solsort.com/icon-small.png]]

** Formål

Formålet er at lave en simpel app hvor det er let at udfylde rapporter fra FM-tools.

Krav til app'en:

- [X] muligt at udfylde rapporterne, ud fra rapportskabelon bestående af linjer med felter
- [X] understøtte dynamiske rapportskabeloner, hvor afsnit(linjer) af rapporten bliver gentaget for hver enhed på de forskellige niveauer. (eksempelvie projekt/tavle/anlæg/komponent)
- [X] muligt at navigere mellem enheder på forskellige niveauer, og finde rapport for pågældende enhed
- [X] forskellige former for felter, ie.: overskrifter/labels, tekstformulare, checkbokse, tal, dato, etc.
- [X] muligt at vedhæfte/se billeder for hver linje i formularen
- [X] formater: håndholdt mobil, samt tablet
- [X] skal kunne funger/udfyldes offline, udfyldte formularer synkroniseres næste gang at der er internetforbindelse
- [X] skal fungere på nyere Android og iOS, - enten _som webapp_, eller +som hybrid app hvis ikke al nødvendig funktionalitet er tilgængelig via webbrowseren+.
- [X] synkronisering med server

** Flags in urlhash

- rot90 :: write fields vertically
- reset :: clear content of database
- noload :: do not load data from api on startup

** Changelog
See github issues for roadmap https://github.com/solsort/fmtools/milestones
*** v0.0.11

- [ ] move issues to github, milestones setup etc.

*** v0.0.10

- [X] update tasks/backlog
- [X] noload option
- [X] temporarily clear offline cache to avoid conflict with  (localforage.clear) - added ~reset~ option via hash
- [X] performance, more responsive edit (fixed through less logging on change)
- [X] input styling, - no hide text
- [X] render control
- [X] fetch control from api
- [X] 90º rotation af tekst-felter (if header-flag, ie ~#...~ of url contains "rot90")

*** v0.0.9

- sync of filled out data + images to/from disk
- stop using keywordize
- when choosing an area/report, make sure that the report/area corresponds to it.
- ability to first choose area, and then choose report. 
- include semantic-css when offline
- refactor disk-sync code
- field data and images store under ~:data~ in a tree data structure (report-id obj-id field/part-id [entry-id])
- memoized reactive application database access through ~db~ (and ~db!~ for writing)
- camera pop-in working removal of images
- camera pop-in working adding of images
- camera pop-in sensible id

*** v0.0.8
- roadmap for version 0.1
- sync report/template to/from disk
- loading indicator
- optionally hide report, when very broad areas is choosen.
- started image/camera pop-in ui

*** v0.0.7

- setup nrepl to work with cider
- refactor / restructure project into separate files
- repeat lines for objects/areas

*** v0.0.6

- progress better data sync to disk
  - write data structure to disk
  - GC/remove old nodes from disk
  - only write changes, fix delta function
  - escape string written, such that encoding for node
    references does not collide with disk.
  - load data structure from disk
  - make sure that diff is optimised (ie. do not traverse all data)
- start saving filled out data into app-db
- BUGFIX: text entry - read from db

*** v0.0.5

- do not select template directly, choose from open reports instead
- experiments towards faster/better synchronisation from app-db to disk

*** v0.0.4

- initial traverse/store report data into database, (needs mangling)
- traverse area/object tree structure / object-graph
- find current selected area, and render list of nodes based on this

*** v0.0.3

- try convert camera-image into dataurl for display
- area/object-tree - choose/show current object/area
- changelog/roadmap
- cors testing/debugging

*** v0.0.2

- offline version with cache manifest
- document data structure
- refactoring
- issue-tracking in documentation/file

*** v0.0.1

- checkbox component that writes to application database
- initial version of camera button (data not fetched yet)
- simple buggy rendition of templates, test that table-format also works on mobile (mostly)
- generic select widget
- choose current template (should be report later)
- responsive ui
- basic communication with api - load data
- Proxy api on demo-deploy-server

** DB

notes - intended content

- :objects (NB: root oid)
  - oid
    - :name
    - "ParentId" oid
    - :children oid-list
    - :api-id id used to identify it in the api
- :templates list
  - "TemplateGuid"
  - "Name"
  - "Description"
  - :lines list
    - "PartId"
    - "TaskDescription"
    - "LineType"
    - :fields list
      - "FieldGuid"
      - "FieldType"
      - "Columns"
      - "DoubleField"
      - "DoubleFieldSeperator" (NB: typo in api)
      - "FieldValue"
- :raw-report
- :ui
- :data
  - report-id
    - object-id
      - field-id / part-id
        - :images - list of image
        - :control
          - series
            - i -> value
        - :field
        - :2-field - second field value
        - value
        - sequence-id
          - value

** Notes / questions about API

I assume the following:

- √ObjectId of objects are unique (no ObjectId occur in different AreaGuids)
- Field/part-data put/get
  - Might we not need ObjectID?
  - Why do we need more than one Guid to identify part of template?
