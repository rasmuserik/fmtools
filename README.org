[[https://travis-ci.org/solsort/fmtools.png]]

* FM-Tools [[https://fmtools.solsort.com/icon-small.png]]

** Formål

Formålet er at lave en simpel app hvor det er let at udfylde rapporter fra FM-tools.

Krav til app'en:

- [ ] muligt at udfylde rapporterne, ud fra rapportskabelon bestående af linjer med felter
- [X] understøtte dynamiske rapportskabeloner, hvor afsnit(linjer) af rapporten bliver gentaget for hver enhed på de forskellige niveauer. (eksempelvie projekt/tavle/anlæg/komponent)
- [X] muligt at navigere mellem enheder på forskellige niveauer, og finde rapport for pågældende enhed
- [ ] forskellige former for felter, ie.: overskrifter/labels, tekstformulare, checkbokse, tal, dato, etc.
- [X] muligt at vedhæfte/se billeder for hver linje i formularen
- [ ] formater: håndholdt mobil, samt tablet
- [ ] skal kunne funger/udfyldes offline, udfyldte formularer synkroniseres næste gang at der er internetforbindelse
- [ ] skal fungere på nyere Android og iOS, - enten _som webapp_, eller +som hybrid app hvis ikke al nødvendig funktionalitet er tilgængelig via webbrowseren+.
- [ ] synkronisering med server

** Flags in urlhash

- rot90 :: write fields vertically
- reset :: clear content of database

** Roadmap

- [-] version 0.1
  - [X] basic report view 
    - [X] choose active report
    - [X] choose active areas
    - [X] render line
    - [X] repeat lines per area
  - [-] field/line-types
    - [X] text-fixed / evt. noframe
    - [X] text-input / evt. noframe
    - [X] checkbox
    - [ ] time
    - [ ] integer
    - [X] 2-digit
    - [ ] 4-digit
    - [X] dual-field
    - [X] fetch-from
    - [ ] approve-reject
    - [ ] remark
    - [ ] decription line (input)
    - [X] basic (text line)
    - [X] head-line
    - [ ] NEW: mobile-vertical text
  - [X] "template-control" line
  - [-] template/report-structure
    - [X] load template/report from api
    - [X] loading indicator + actual channel for result
    - [ ] check for updates
    - [X] sync to disk
    - [X] load from disk
    - [X] MAYBE refactor not to use keywords (for performance)
  - [-] report filled-out content
    - [ ] load all from api
    - [X] sync to disk
    - [ ] write changes to api
    - [ ] load incremental changes from api
  - [-] images
    - [X] image button per line
    - [X] ability to capture image
    - [X] save image to disk
    - [ ] sync image to server
    - [X] show existing images (when online)
    - [X] remove image
  - [-] general
    - [X] make all assets work offline
    - [ ] check for connectivity changes, and sync when connected / regularly
    - [ ] verify it works on android
    - [ ] verify it works on iOS
    - [ ] try to make it work on Windows Phone
    - [ ] verify it works on phone as well as tablet
    - [X] checkbox component
    - [X] input component
    - [X] memoised reactive db path lookup and write, ie. =(db :foo :bar)= and =(db! :foo :bar value)=
  - [X] design
    - [X] simple semantic-ui responsive design
    - [X] vertical text (needs change in backend, currently supported with "rot90" hash)
    - [X] avoid input truncation
  - [X] infrastructure
    - [X] development api proxy
    - [X] https/cors support
    - [X] responsive ui framework
  - [X] documentation
    - [X] general project documentation
    - [X] roadmap
    - [X] changelog
    - [X] document data structure
 
Current sprint:
v0.0.10

- [ ] test on devices + possible fixes
- [X] temporarily clear offline cache to avoid conflict with  (localforage.clear) - added ~reset~ option via hash
- [X] performance, more responsive edit (fixed through less logging on change)
- [X] input styling, - no hide text
- [X] render control
- [X] fetch control from api
- [X] 90º rotation af tekst-felter (if header-flag, ie ~#...~ of url contains "rot90")

*** Changelog
**** v0.0.9

- sync of filled out data + images to/from disk
- stop using keywordize
- when choosing an area/report, make sure that the report/area corresponds to it.
- ability to first choose area, and then choose report. 
- include semantic-css when offline
- refactor disk-sync code
- field data and images store under ~:data~ in a tree data structure (report-id obj-id field/part-id [entry-id])
- memoized reactive application database access through ~db~ (and ~db!~ for writing)
- camera pop-in working removal of images
- camera pop-in working adding of images
- camera pop-in sensible id

**** v0.0.8
- roadmap for version 0.1
- sync report/template to/from disk
- loading indicator
- optionally hide report, when very broad areas is choosen.
- started image/camera pop-in ui

**** v0.0.7

- setup nrepl to work with cider
- refactor / restructure project into separate files
- repeat lines for objects/areas

**** v0.0.6

- progress better data sync to disk
  - write data structure to disk
  - GC/remove old nodes from disk
  - only write changes, fix delta function
  - escape string written, such that encoding for node
    references does not collide with disk.
  - load data structure from disk
  - make sure that diff is optimised (ie. do not traverse all data)
- start saving filled out data into app-db
- BUGFIX: text entry - read from db

**** v0.0.5

- do not select template directly, choose from open reports instead
- experiments towards faster/better synchronisation from app-db to disk

**** v0.0.4

- initial traverse/store report data into database, (needs mangling)
- traverse area/object tree structure / object-graph
- find current selected area, and render list of nodes based on this

**** v0.0.3

- try convert camera-image into dataurl for display
- area/object-tree - choose/show current object/area
- changelog/roadmap
- cors testing/debugging

**** v0.0.2

- offline version with cache manifest
- document data structure
- refactoring
- issue-tracking in documentation/file

**** v0.0.1

- checkbox component that writes to application database
- initial version of camera button (data not fetched yet)
- simple buggy rendition of templates, test that table-format also works on mobile (mostly)
- generic select widget
- choose current template (should be report later)
- responsive ui
- basic communication with api - load data
- Proxy api on demo-deploy-server

*** Backlog

v0.1.0

- general
  - better data model / data mapping
    - function for mapping api-data to internal data
    - make implentation match documentation
      - templates should be list instead of object
      - ~:lines~ instead of ~:rows~ in template
      - new objects graph format
  - refactor/update code
  - expand this task list, as it gets solved
- fill out reports (templates of lines / with different kinds of fields)
  - generic widgets
  - fields
    - separate ids for double-checkboxes
- synchronise to disk / works offline
  - better performant sync of db to disk
    - use localforage instead of localstorage
    - check if async single-blob is ok performancewise
- dynamic templates (repeat lines based on objects)
  - repeat lines based on object-graph traversal
- sync data  to server
- attach/show images for each line in the report
  - photo capture
    - make sure react-img has proper properties
    - fetch data to db
  - show images
- works on mobile, and table. iOS, Android, (and Windows Phone if time permits)

**** Later

- proper horizontal labels (probably also needs extra option in backend)

** DB

notes - intended content

- ~:objects~ (NB: root oid)
  - oid
    - ~:name~
    - ~"ParentId"~ oid
    - ~:children~ oid-list
    - ~:api-id~ id used to identify it in the api
- ~:templates~ list
  - ~"TemplateGuid"~
  - ~"Name"~
  - ~"Description"~
  - ~:lines~ list
    - ~"PartId"~
    - ~"TaskDescription"~
    - ~"LineType"~
    - ~:fields~ list
      - ~"FieldGuid"~
      - ~"FieldType"~
      - ~"Columns"~
      - ~"DoubleField"~
      - ~"DoubleFieldSeperator"~ (NB: typo in api)
      - ~"FieldValue"~
- ~:raw-report~
- ~:ui~
- ~:data~
  - report-id
    - object-id
      - field-id / part-id
        - value
        - sequence-id
          - value

** Notes / questions about API

I assume the following:

- √ObjectId of objects are unique (no ObjectId occur in different AreaGuids)
- Field/part-data put/get
  - Might we not need ObjectID?
  - Why do we need more than one Guid to identify part of template?
